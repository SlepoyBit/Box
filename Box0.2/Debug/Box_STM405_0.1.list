
Box_STM405_0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005034  08005034  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800503c  0800503c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000244  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e324  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd0  00000000  00000000  0002e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00030330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd3d  00000000  00000000  00031d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e617  00000000  00000000  00051a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9443  00000000  00000000  0006006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001294af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003854  00000000  00000000  00129500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005004 	.word	0x08005004

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005004 	.word	0x08005004

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_SET);

    if(htim->Instance == TIM7) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d111      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x36>
    	//HAL_GPIO_TogglePin(GREEN_LED_Port, GREEN_LED_Pin);
    	TIM1->CCR1 = DataEncoder; // duty cycle PWM
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004e0:	881a      	ldrh	r2, [r3, #0]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
    	//TIM1->CCR1 = adcData[0];
    	uint32_t mailBoxNum = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
    	HAL_CAN_AddTxMessage(&hcan2, &pTxHeader2, TxDataBuff2, &mailBoxNum);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80004f0:	490a      	ldr	r1, [pc, #40]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80004f4:	f001 fe34 	bl	8002160 <HAL_CAN_AddTxMessage>

    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData,1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	490a      	ldr	r1, [pc, #40]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80004fe:	f001 f837 	bl	8001570 <HAL_ADC_Start_DMA>

    }
    }
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40001400 	.word	0x40001400
 8000510:	2000023c 	.word	0x2000023c
 8000514:	40010000 	.word	0x40010000
 8000518:	2000022c 	.word	0x2000022c
 800051c:	200001f0 	.word	0x200001f0
 8000520:	200000f8 	.word	0x200000f8
 8000524:	20000240 	.word	0x20000240
 8000528:	20000028 	.word	0x20000028

0800052c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]


	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &pRxHeader2, RxDataBuff2);
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000538:	2100      	movs	r1, #0
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800053c:	f001 feeb 	bl	8002316 <HAL_CAN_GetRxMessage>

	if (pRxHeader2.StdId==ID2_rx) {
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8000548:	d110      	bne.n	800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	DataEncoder=RxDataBuff2[0];
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000552:	801a      	strh	r2, [r3, #0]
    DataEncoder|=RxDataBuff2[1]<<8;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21b      	sxth	r3, r3
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800056a:	801a      	strh	r2, [r3, #0]
//    else HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, GPIO_PIN_RESET);
//HAL_GPIO_TogglePin(GREEN_LED_Port, GREEN_LED_Pin);


	}
	}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000234 	.word	0x20000234
 8000578:	20000208 	.word	0x20000208
 800057c:	200000f8 	.word	0x200000f8
 8000580:	2000023c 	.word	0x2000023c

08000584 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d113      	bne.n	80005be <HAL_ADC_ConvCpltCallback+0x3a>
  {   TxDataBuff1[0]=adcData[0]>>8;
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005a0:	701a      	strb	r2, [r3, #0]
      TxDataBuff1[1]=adcData[0];
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005aa:	705a      	strb	r2, [r3, #1]

	 uint32_t mailBoxNum = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
	 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader1, TxDataBuff1, &mailBoxNum);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005b6:	4907      	ldr	r1, [pc, #28]	; (80005d4 <HAL_ADC_ConvCpltCallback+0x50>)
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <HAL_ADC_ConvCpltCallback+0x54>)
 80005ba:	f001 fdd1 	bl	8002160 <HAL_CAN_AddTxMessage>
 /*   for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
    {
      adcVoltage[i] = adcData[i] * 3.3 / 4095;
    }*/
  }
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40012000 	.word	0x40012000
 80005cc:	20000240 	.word	0x20000240
 80005d0:	20000224 	.word	0x20000224
 80005d4:	200001d8 	.word	0x200001d8
 80005d8:	200000d0 	.word	0x200000d0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fe00 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f826 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa7e 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fa5c 	bl	8000aa8 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f0:	f000 f8ce 	bl	8000790 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005f4:	f000 f936 	bl	8000864 <MX_CAN2_Init>
  MX_TIM7_Init();
 80005f8:	f000 fa20 	bl	8000a3c <MX_TIM7_Init>
  MX_TIM1_Init();
 80005fc:	f000 f99a 	bl	8000934 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000600:	f000 f874 	bl	80006ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <main+0x48>)
 8000606:	f003 fc99 	bl	8003f3c <HAL_TIM_Base_Start_IT>
  TIM1->CCR1 = DataEncoder; // MAX 800 PWM GPIO_OUT_HIGH
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <main+0x4c>)
 800060c:	881a      	ldrh	r2, [r3, #0]
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <main+0x50>)
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000612:	2100      	movs	r1, #0
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <main+0x54>)
 8000616:	f003 fd01 	bl	800401c <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim1, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <main+0x54>)
 800061e:	f004 facb 	bl	8004bb8 <HAL_TIMEx_OCN_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x46>
 8000624:	20000168 	.word	0x20000168
 8000628:	2000023c 	.word	0x2000023c
 800062c:	40010000 	.word	0x40010000
 8000630:	20000120 	.word	0x20000120

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fcd6 	bl	8004ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <SystemClock_Config+0xb0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xb0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xb0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemClock_Config+0xb4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <SystemClock_Config+0xb4>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemClock_Config+0xb4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ffd6 	bl	8003654 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006ae:	f000 fa7b 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fa39 	bl	8003b44 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006d8:	f000 fa66 	bl	8000ba8 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC1_Init+0x98>)
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_ADC1_Init+0xa0>)
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_ADC1_Init+0x98>)
 800074c:	f000 fdbc 	bl	80012c8 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 fa27 	bl	8000ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	2301      	movs	r3, #1
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC1_Init+0x98>)
 800076c:	f001 f82e 	bl	80017cc <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000776:	f000 fa17 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	pTxHeader1.StdId = ID1_tx;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_CAN1_Init+0xc4>)
 8000796:	2212      	movs	r2, #18
 8000798:	601a      	str	r2, [r3, #0]
	pTxHeader1.DLC = 8;
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_CAN1_Init+0xc4>)
 800079c:	2208      	movs	r2, #8
 800079e:	611a      	str	r2, [r3, #16]
	pTxHeader1.TransmitGlobalTime = DISABLE;
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_CAN1_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	751a      	strb	r2, [r3, #20]
	pTxHeader1.RTR = CAN_RTR_DATA;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MX_CAN1_Init+0xc4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
	pTxHeader1.IDE = CAN_ID_STD;
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_CAN1_Init+0xc4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007b4:	4a29      	ldr	r2, [pc, #164]	; (800085c <MX_CAN1_Init+0xcc>)
 80007b6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007ba:	2214      	movs	r2, #20
 80007bc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_CAN1_Init+0xc8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007fe:	4816      	ldr	r0, [pc, #88]	; (8000858 <MX_CAN1_Init+0xc8>)
 8000800:	f001 fa8e 	bl	8001d20 <HAL_CAN_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_CAN1_Init+0x7e>
  {
    Error_Handler();
 800080a:	f000 f9cd 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_CAN1_Init+0xd0>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0; //0x245<<5;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_CAN1_Init+0xd0>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_CAN1_Init+0xd0>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_CAN1_Init+0xd0>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_CAN1_Init+0xd0>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_CAN1_Init+0xd0>)
 800082e:	2201      	movs	r2, #1
 8000830:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_CAN1_Init+0xd0>)
 8000834:	2201      	movs	r2, #1
 8000836:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1,  &sFilterConfig);
 8000838:	4909      	ldr	r1, [pc, #36]	; (8000860 <MX_CAN1_Init+0xd0>)
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_CAN1_Init+0xc8>)
 800083c:	f001 fb6c 	bl	8001f18 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_CAN1_Init+0xc8>)
 8000842:	f001 fc49 	bl	80020d8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000846:	2102      	movs	r1, #2
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_CAN1_Init+0xc8>)
 800084a:	f001 fe76 	bl	800253a <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001d8 	.word	0x200001d8
 8000858:	200000d0 	.word	0x200000d0
 800085c:	40006400 	.word	0x40006400
 8000860:	200001b0 	.word	0x200001b0

08000864 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN2_Init 0 */
	pTxHeader2.StdId = ID2_tx;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_CAN2_Init+0xc0>)
 800086a:	2222      	movs	r2, #34	; 0x22
 800086c:	601a      	str	r2, [r3, #0]
	pTxHeader2.DLC = 8;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_CAN2_Init+0xc0>)
 8000870:	2208      	movs	r2, #8
 8000872:	611a      	str	r2, [r3, #16]
	pTxHeader2.TransmitGlobalTime = DISABLE;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_CAN2_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	751a      	strb	r2, [r3, #20]
	pTxHeader2.RTR = CAN_RTR_DATA;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_CAN2_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
	pTxHeader2.IDE = CAN_ID_STD;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_CAN2_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_CAN2_Init+0xc4>)
 8000888:	4a28      	ldr	r2, [pc, #160]	; (800092c <MX_CAN2_Init+0xc8>)
 800088a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 20;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_CAN2_Init+0xc4>)
 800088e:	2214      	movs	r2, #20
 8000890:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_CAN2_Init+0xc4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_CAN2_Init+0xc4>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008a0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80008a4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = ENABLE;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <MX_CAN2_Init+0xc4>)
 80008d2:	f001 fa25 	bl	8001d20 <HAL_CAN_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_CAN2_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f964 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_CAN2_Init+0xcc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0; //0x245<<5;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_CAN2_Init+0xcc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_CAN2_Init+0xcc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_CAN2_Init+0xcc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_CAN2_Init+0xcc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_CAN2_Init+0xcc>)
 8000900:	2201      	movs	r2, #1
 8000902:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_CAN2_Init+0xcc>)
 8000906:	2201      	movs	r2, #1
 8000908:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan2,  &sFilterConfig);
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <MX_CAN2_Init+0xcc>)
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_CAN2_Init+0xc4>)
 800090e:	f001 fb03 	bl	8001f18 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan2);
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_CAN2_Init+0xc4>)
 8000914:	f001 fbe0 	bl	80020d8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000918:	2102      	movs	r1, #2
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_CAN2_Init+0xc4>)
 800091c:	f001 fe0d 	bl	800253a <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200001f0 	.word	0x200001f0
 8000928:	200000f8 	.word	0x200000f8
 800092c:	40006800 	.word	0x40006800
 8000930:	200001b0 	.word	0x200001b0

08000934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b092      	sub	sp, #72	; 0x48
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2220      	movs	r2, #32
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fb48 	bl	8004ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000966:	4a34      	ldr	r2, [pc, #208]	; (8000a38 <MX_TIM1_Init+0x104>)
 8000968:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25-1;
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <MX_TIM1_Init+0x100>)
 800096c:	2218      	movs	r2, #24
 800096e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000978:	f242 7210 	movw	r2, #10000	; 0x2710
 800097c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_TIM1_Init+0x100>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000990:	4828      	ldr	r0, [pc, #160]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000992:	f003 fc59 	bl	8004248 <HAL_TIM_PWM_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800099c:	f000 f904 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ac:	4619      	mov	r1, r3
 80009ae:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MX_TIM1_Init+0x100>)
 80009b0:	f004 f9f4 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009ba:	f000 f8f5 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <MX_TIM1_Init+0x100>)
 80009e4:	f003 fd88 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009ee:	f000 f8db 	bl	8000ba8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000a16:	f004 fa3d 	bl	8004e94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a20:	f000 f8c2 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM1_Init+0x100>)
 8000a26:	f000 fab3 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000a2a:	bf00      	nop
 8000a2c:	3748      	adds	r7, #72	; 0x48
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000120 	.word	0x20000120
 8000a38:	40010000 	.word	0x40010000

08000a3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a4c:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_TIM7_Init+0x68>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 25-1;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a52:	2218      	movs	r2, #24
 8000a54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a5e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a6c:	f003 fa16 	bl	8003e9c <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000a76:	f000 f897 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM7_Init+0x64>)
 8000a88:	f004 f988 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a92:	f000 f889 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000168 	.word	0x20000168
 8000aa4:	40001400 	.word	0x40001400

08000aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_DMA_Init+0x3c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <MX_DMA_Init+0x3c>)
 8000ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_DMA_Init+0x3c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2038      	movs	r0, #56	; 0x38
 8000ad0:	f002 f863 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ad4:	2038      	movs	r0, #56	; 0x38
 8000ad6:	f002 f87c 	bl	8002bd2 <HAL_NVIC_EnableIRQ>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_GPIO_Init+0xb8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <MX_GPIO_Init+0xbc>)
 8000b76:	f002 fd53 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000b7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_GPIO_Init+0xbc>)
 8000b94:	f002 fba8 	bl	80032e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(RED_LED_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <Error_Handler+0x18>)
 8000bb4:	f002 fd34 	bl	8003620 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x14>
 8000bbe:	bf00      	nop
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_MspInit+0x58>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <HAL_MspInit+0x58>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x58>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x58>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_MspInit+0x58>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x58>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2005      	movs	r0, #5
 8000c08:	f001 ffc7 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f001 ffe0 	bl	8002bd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a32      	ldr	r2, [pc, #200]	; (8000d08 <HAL_ADC_MspInit+0xe8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d15e      	bne.n	8000d00 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_ADC_MspInit+0xec>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <HAL_ADC_MspInit+0xec>)
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_ADC_MspInit+0xec>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_ADC_MspInit+0xec>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a29      	ldr	r2, [pc, #164]	; (8000d0c <HAL_ADC_MspInit+0xec>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_ADC_MspInit+0xec>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4820      	ldr	r0, [pc, #128]	; (8000d10 <HAL_ADC_MspInit+0xf0>)
 8000c8e:	f002 fb2b 	bl	80032e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_ADC_MspInit+0xf8>)
 8000c96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cd6:	f001 ff97 	bl	8002c08 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ce0:	f7ff ff62 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_ADC_MspInit+0xf4>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2012      	movs	r0, #18
 8000cf6:	f001 ff50 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cfa:	2012      	movs	r0, #18
 8000cfc:	f001 ff69 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40012000 	.word	0x40012000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	20000070 	.word	0x20000070
 8000d18:	40026410 	.word	0x40026410

08000d1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a63      	ldr	r2, [pc, #396]	; (8000ec8 <HAL_CAN_MspInit+0x1ac>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d156      	bne.n	8000dec <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d3e:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <HAL_CAN_MspInit+0x1b0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a61      	ldr	r2, [pc, #388]	; (8000ecc <HAL_CAN_MspInit+0x1b0>)
 8000d46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d48:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <HAL_CAN_MspInit+0x1b0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	4b5e      	ldr	r3, [pc, #376]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a5d      	ldr	r2, [pc, #372]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000d5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a56      	ldr	r2, [pc, #344]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	484b      	ldr	r0, [pc, #300]	; (8000ed4 <HAL_CAN_MspInit+0x1b8>)
 8000da6:	f002 fa9f 	bl	80032e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2013      	movs	r0, #19
 8000db0:	f001 fef3 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000db4:	2013      	movs	r0, #19
 8000db6:	f001 ff0c 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f001 feeb 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dc4:	2014      	movs	r0, #20
 8000dc6:	f001 ff04 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2015      	movs	r0, #21
 8000dd0:	f001 fee3 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000dd4:	2015      	movs	r0, #21
 8000dd6:	f001 fefc 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2016      	movs	r0, #22
 8000de0:	f001 fedb 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000de4:	2016      	movs	r0, #22
 8000de6:	f001 fef4 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000dea:	e068      	b.n	8000ebe <HAL_CAN_MspInit+0x1a2>
  else if(hcan->Instance==CAN2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a39      	ldr	r2, [pc, #228]	; (8000ed8 <HAL_CAN_MspInit+0x1bc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d163      	bne.n	8000ebe <HAL_CAN_MspInit+0x1a2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a34      	ldr	r2, [pc, #208]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_CAN_MspInit+0x1b0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <HAL_CAN_MspInit+0x1b0>)
 8000e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_CAN_MspInit+0x1b0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10d      	bne.n	8000e40 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_CAN_MspInit+0x1b4>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <HAL_CAN_MspInit+0x1c0>)
 8000e7a:	f002 fa35 	bl	80032e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	203f      	movs	r0, #63	; 0x3f
 8000e84:	f001 fe89 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000e88:	203f      	movs	r0, #63	; 0x3f
 8000e8a:	f001 fea2 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2040      	movs	r0, #64	; 0x40
 8000e94:	f001 fe81 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000e98:	2040      	movs	r0, #64	; 0x40
 8000e9a:	f001 fe9a 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2041      	movs	r0, #65	; 0x41
 8000ea4:	f001 fe79 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000ea8:	2041      	movs	r0, #65	; 0x41
 8000eaa:	f001 fe92 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2042      	movs	r0, #66	; 0x42
 8000eb4:	f001 fe71 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000eb8:	2042      	movs	r0, #66	; 0x42
 8000eba:	f001 fe8a 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3730      	adds	r7, #48	; 0x30
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	20000248 	.word	0x20000248
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40006800 	.word	0x40006800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_TIM_PWM_MspInit+0x58>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11d      	bne.n	8000f2e <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_TIM_PWM_MspInit+0x5c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_TIM_PWM_MspInit+0x5c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_TIM_PWM_MspInit+0x5c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2018      	movs	r0, #24
 8000f14:	f001 fe41 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f18:	2018      	movs	r0, #24
 8000f1a:	f001 fe5a 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2019      	movs	r0, #25
 8000f24:	f001 fe39 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f28:	2019      	movs	r0, #25
 8000f2a:	f001 fe52 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_TIM_Base_MspInit+0x48>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d115      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_TIM_Base_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_TIM_Base_MspInit+0x4c>)
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_Base_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0320 	and.w	r3, r3, #32
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2037      	movs	r0, #55	; 0x37
 8000f74:	f001 fe11 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f78:	2037      	movs	r0, #55	; 0x37
 8000f7a:	f001 fe2a 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40001400 	.word	0x40001400
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_TIM_MspPostInit+0x68>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d11e      	bne.n	8000ff0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000fce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_TIM_MspPostInit+0x70>)
 8000fec:	f002 f97c 	bl	80032e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f91a 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <ADC_IRQHandler+0x10>)
 800106e:	f000 f96e 	bl	800134e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000028 	.word	0x20000028

0800107c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <CAN1_TX_IRQHandler+0x10>)
 8001082:	f001 fa80 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000d0 	.word	0x200000d0

08001090 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <CAN1_RX0_IRQHandler+0x10>)
 8001096:	f001 fa76 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000d0 	.word	0x200000d0

080010a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CAN1_RX1_IRQHandler+0x10>)
 80010aa:	f001 fa6c 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000d0 	.word	0x200000d0

080010b8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <CAN1_SCE_IRQHandler+0x10>)
 80010be:	f001 fa62 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000d0 	.word	0x200000d0

080010cc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010d2:	f003 f908 	bl	80042e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000120 	.word	0x20000120

080010e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010e6:	f003 f8fe 	bl	80042e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000120 	.word	0x20000120

080010f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM7_IRQHandler+0x10>)
 80010fa:	f003 f8f4 	bl	80042e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000168 	.word	0x20000168

08001108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <DMA2_Stream0_IRQHandler+0x10>)
 800110e:	f001 fe81 	bl	8002e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000070 	.word	0x20000070

0800111c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <CAN2_TX_IRQHandler+0x10>)
 8001122:	f001 fa30 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000f8 	.word	0x200000f8

08001130 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <CAN2_RX0_IRQHandler+0x10>)
 8001136:	f001 fa26 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000f8 	.word	0x200000f8

08001144 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <CAN2_RX1_IRQHandler+0x10>)
 800114a:	f001 fa1c 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000f8 	.word	0x200000f8

08001158 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <CAN2_SCE_IRQHandler+0x10>)
 800115e:	f001 fa12 	bl	8002586 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000f8 	.word	0x200000f8

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <SystemInit+0x20>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <SystemInit+0x20>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001196:	490e      	ldr	r1, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ac:	4c0b      	ldr	r4, [pc, #44]	; (80011dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ba:	f7ff ffd7 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011be:	f003 fef5 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff fa0b 	bl	80005dc <main>
  bx  lr    
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011d4:	08005044 	.word	0x08005044
  ldr r2, =_sbss
 80011d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011dc:	20000250 	.word	0x20000250

080011e0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <DMA1_Stream0_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_Init+0x40>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_Init+0x40>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x40>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f001 fcb9 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fcd4 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fcd1 	bl	8002bee <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f001 fc99 	bl	8002b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008
 80012ac:	2000024c 	.word	0x2000024c

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000024c 	.word	0x2000024c

080012c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e033      	b.n	8001346 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fc9a 	bl	8000c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800130e:	f023 0302 	bic.w	r3, r3, #2
 8001312:	f043 0202 	orr.w	r2, r3, #2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fb78 	bl	8001a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
 8001336:	e001      	b.n	800133c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d049      	beq.n	8001418 <HAL_ADC_IRQHandler+0xca>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d046      	beq.n	8001418 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d12b      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d127      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d119      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0220 	bic.w	r2, r2, #32
 80013e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff f8bb 	bl	8000584 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f06f 0212 	mvn.w	r2, #18
 8001416:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d057      	beq.n	80014de <HAL_ADC_IRQHandler+0x190>
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d054      	beq.n	80014de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d139      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001472:	2b00      	cmp	r3, #0
 8001474:	d12b      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001480:	2b00      	cmp	r3, #0
 8001482:	d124      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d11d      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001496:	2b00      	cmp	r3, #0
 8001498:	d119      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fc1c 	bl	8001d0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f06f 020c 	mvn.w	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d017      	beq.n	8001524 <HAL_ADC_IRQHandler+0x1d6>
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d014      	beq.n	8001524 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10d      	bne.n	8001524 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f945 	bl	80017a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0201 	mvn.w	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001532:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <HAL_ADC_IRQHandler+0x218>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d012      	beq.n	8001566 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	f043 0202 	orr.w	r2, r3, #2
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f06f 0220 	mvn.w	r2, #32
 8001554:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f92e 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f06f 0220 	mvn.w	r2, #32
 8001564:	601a      	str	r2, [r3, #0]
  }
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Start_DMA+0x1e>
 800158a:	2302      	movs	r3, #2
 800158c:	e0e9      	b.n	8001762 <HAL_ADC_Start_DMA+0x1f2>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d018      	beq.n	80015d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <HAL_ADC_Start_DMA+0x1fc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6d      	ldr	r2, [pc, #436]	; (8001770 <HAL_ADC_Start_DMA+0x200>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9a      	lsrs	r2, r3, #18
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e4:	d107      	bne.n	80015f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 80a1 	bne.w	8001748 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001630:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001644:	d106      	bne.n	8001654 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f023 0206 	bic.w	r2, r3, #6
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	645a      	str	r2, [r3, #68]	; 0x44
 8001652:	e002      	b.n	800165a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_ADC_Start_DMA+0x204>)
 8001664:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166a:	4a43      	ldr	r2, [pc, #268]	; (8001778 <HAL_ADC_Start_DMA+0x208>)
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_ADC_Start_DMA+0x20c>)
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	4a41      	ldr	r2, [pc, #260]	; (8001780 <HAL_ADC_Start_DMA+0x210>)
 800167c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001686:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001696:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	334c      	adds	r3, #76	; 0x4c
 80016b2:	4619      	mov	r1, r3
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f001 fb54 	bl	8002d64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d12a      	bne.n	800171e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <HAL_ADC_Start_DMA+0x214>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d015      	beq.n	80016fe <HAL_ADC_Start_DMA+0x18e>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <HAL_ADC_Start_DMA+0x218>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_Start_DMA+0x178>
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_ADC_Start_DMA+0x204>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a27      	ldr	r2, [pc, #156]	; (800178c <HAL_ADC_Start_DMA+0x21c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d136      	bne.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_ADC_Start_DMA+0x204>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d130      	bne.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d129      	bne.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	e020      	b.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <HAL_ADC_Start_DMA+0x214>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d11b      	bne.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d114      	bne.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	e00b      	b.n	8001760 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f043 0210 	orr.w	r2, r3, #16
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	431bde83 	.word	0x431bde83
 8001774:	40012300 	.word	0x40012300
 8001778:	08001c09 	.word	0x08001c09
 800177c:	08001cc3 	.word	0x08001cc3
 8001780:	08001cdf 	.word	0x08001cdf
 8001784:	40012000 	.word	0x40012000
 8001788:	40012100 	.word	0x40012100
 800178c:	40012200 	.word	0x40012200

08001790 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1c>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e105      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x228>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b09      	cmp	r3, #9
 80017f6:	d925      	bls.n	8001844 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68d9      	ldr	r1, [r3, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	3b1e      	subs	r3, #30
 800180e:	2207      	movs	r2, #7
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43da      	mvns	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	400a      	ands	r2, r1
 800181c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68d9      	ldr	r1, [r3, #12]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	4603      	mov	r3, r0
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4403      	add	r3, r0
 8001836:	3b1e      	subs	r3, #30
 8001838:	409a      	lsls	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	e022      	b.n	800188a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6919      	ldr	r1, [r3, #16]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	2207      	movs	r2, #7
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	400a      	ands	r2, r1
 8001866:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	4603      	mov	r3, r0
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4403      	add	r3, r0
 8001880:	409a      	lsls	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b06      	cmp	r3, #6
 8001890:	d824      	bhi.n	80018dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3b05      	subs	r3, #5
 80018a4:	221f      	movs	r2, #31
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	400a      	ands	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	3b05      	subs	r3, #5
 80018ce:	fa00 f203 	lsl.w	r2, r0, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
 80018da:	e04c      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d824      	bhi.n	800192e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b23      	subs	r3, #35	; 0x23
 80018f6:	221f      	movs	r2, #31
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43da      	mvns	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	400a      	ands	r2, r1
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b23      	subs	r3, #35	; 0x23
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
 800192c:	e023      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	3b41      	subs	r3, #65	; 0x41
 8001940:	221f      	movs	r2, #31
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	400a      	ands	r2, r1
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3b41      	subs	r3, #65	; 0x41
 800196a:	fa00 f203 	lsl.w	r2, r0, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_ADC_ConfigChannel+0x234>)
 8001978:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_ADC_ConfigChannel+0x238>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d109      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1cc>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b12      	cmp	r3, #18
 800198a:	d105      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_ADC_ConfigChannel+0x238>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d123      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x21e>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d003      	beq.n	80019b2 <HAL_ADC_ConfigChannel+0x1e6>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b11      	cmp	r3, #17
 80019b0:	d11b      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d111      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_ADC_ConfigChannel+0x23c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_ADC_ConfigChannel+0x240>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	0c9a      	lsrs	r2, r3, #18
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019dc:	e002      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f9      	bne.n	80019de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40012300 	.word	0x40012300
 8001a04:	40012000 	.word	0x40012000
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <ADC_Init+0x1f0>)
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	021a      	lsls	r2, r3, #8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <ADC_Init+0x1f4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e00f      	b.n	8001b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0202 	bic.w	r2, r2, #2
 8001b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e1b      	ldrb	r3, [r3, #24]
 8001b28:	005a      	lsls	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	3b01      	subs	r3, #1
 8001b68:	035a      	lsls	r2, r3, #13
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	e007      	b.n	8001b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	051a      	lsls	r2, r3, #20
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc6:	025a      	lsls	r2, r3, #9
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	029a      	lsls	r2, r3, #10
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	0f000001 	.word	0x0f000001

08001c08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d13c      	bne.n	8001c9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d12b      	bne.n	8001c94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d127      	bne.n	8001c94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d119      	bne.n	8001c94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0220 	bic.w	r2, r2, #32
 8001c6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe fc75 	bl	8000584 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c9a:	e00e      	b.n	8001cba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fd85 	bl	80017b8 <HAL_ADC_ErrorCallback>
}
 8001cae:	e004      	b.n	8001cba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fd5d 	bl	8001790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f043 0204 	orr.w	r2, r3, #4
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff fd5a 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0ed      	b.n	8001f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe ffec 	bl	8000d1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff faac 	bl	80012b0 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d5a:	e012      	b.n	8001d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d5c:	f7ff faa8 	bl	80012b0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b0a      	cmp	r3, #10
 8001d68:	d90b      	bls.n	8001d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2205      	movs	r2, #5
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0c5      	b.n	8001f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0e5      	beq.n	8001d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0202 	bic.w	r2, r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff fa86 	bl	80012b0 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da6:	e012      	b.n	8001dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da8:	f7ff fa82 	bl	80012b0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d90b      	bls.n	8001dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e09f      	b.n	8001f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e5      	bne.n	8001da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e007      	b.n	8001e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e5b      	ldrb	r3, [r3, #25]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e007      	b.n	8001e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e9b      	ldrb	r3, [r3, #26]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0220 	bic.w	r2, r2, #32
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7edb      	ldrb	r3, [r3, #27]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0210 	bic.w	r2, r2, #16
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e007      	b.n	8001e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0210 	orr.w	r2, r2, #16
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7f1b      	ldrb	r3, [r3, #28]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e007      	b.n	8001eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0208 	bic.w	r2, r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7f5b      	ldrb	r3, [r3, #29]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0204 	orr.w	r2, r2, #4
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	ea42 0103 	orr.w	r1, r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d003      	beq.n	8001f3e <HAL_CAN_ConfigFilter+0x26>
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	f040 80be 	bne.w	80020ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f3e:	4b65      	ldr	r3, [pc, #404]	; (80020d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f40:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2201      	movs	r2, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	401a      	ands	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d123      	bne.n	8001fe8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3248      	adds	r2, #72	; 0x48
 8001fc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fde:	6979      	ldr	r1, [r7, #20]
 8001fe0:	3348      	adds	r3, #72	; 0x48
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d122      	bne.n	8002036 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002010:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3248      	adds	r2, #72	; 0x48
 8002016:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800202a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800202c:	6979      	ldr	r1, [r7, #20]
 800202e:	3348      	adds	r3, #72	; 0x48
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002050:	e007      	b.n	8002062 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	401a      	ands	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800207c:	e007      	b.n	800208e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	431a      	orrs	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	431a      	orrs	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ac:	f023 0201 	bic.w	r2, r3, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e006      	b.n	80020c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40006400 	.word	0x40006400

080020d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d12e      	bne.n	800214a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002104:	f7ff f8d4 	bl	80012b0 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800210a:	e012      	b.n	8002132 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800210c:	f7ff f8d0 	bl	80012b0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d90b      	bls.n	8002132 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2205      	movs	r2, #5
 800212a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e012      	b.n	8002158 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e5      	bne.n	800210c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e006      	b.n	8002158 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800217e:	7ffb      	ldrb	r3, [r7, #31]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d003      	beq.n	800218c <HAL_CAN_AddTxMessage+0x2c>
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	2b02      	cmp	r3, #2
 8002188:	f040 80b8 	bne.w	80022fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a0 	beq.w	80022ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	0e1b      	lsrs	r3, r3, #24
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d907      	bls.n	80021cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e09e      	b.n	800230a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021cc:	2201      	movs	r2, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	409a      	lsls	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	6809      	ldr	r1, [r1, #0]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3318      	adds	r3, #24
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	440b      	add	r3, r1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e00f      	b.n	800221a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002204:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800220e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3318      	adds	r3, #24
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3318      	adds	r3, #24
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	440b      	add	r3, r1
 800222a:	3304      	adds	r3, #4
 800222c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	7d1b      	ldrb	r3, [r3, #20]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d111      	bne.n	800225a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3318      	adds	r3, #24
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	3304      	adds	r3, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	6811      	ldr	r1, [r2, #0]
 800224a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3318      	adds	r3, #24
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	440b      	add	r3, r1
 8002256:	3304      	adds	r3, #4
 8002258:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3307      	adds	r3, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	061a      	lsls	r2, r3, #24
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3306      	adds	r3, #6
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3305      	adds	r3, #5
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	4313      	orrs	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	3204      	adds	r2, #4
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	4610      	mov	r0, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	ea43 0200 	orr.w	r2, r3, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	440b      	add	r3, r1
 800228c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002290:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3303      	adds	r3, #3
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	061a      	lsls	r2, r3, #24
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3302      	adds	r3, #2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3301      	adds	r3, #1
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	4313      	orrs	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	4610      	mov	r0, r2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6811      	ldr	r1, [r2, #0]
 80022b8:	ea43 0200 	orr.w	r2, r3, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3318      	adds	r3, #24
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6811      	ldr	r1, [r2, #0]
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3318      	adds	r3, #24
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	440b      	add	r3, r1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e00e      	b.n	800230a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e006      	b.n	800230a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002316:	b480      	push	{r7}
 8002318:	b087      	sub	sp, #28
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d003      	beq.n	800233a <HAL_CAN_GetRxMessage+0x24>
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 80f3 	bne.w	8002520 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10e      	bne.n	800235e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e7      	b.n	800252e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d8      	b.n	800252e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	331b      	adds	r3, #27
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0204 	and.w	r2, r3, #4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	331b      	adds	r3, #27
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0d5b      	lsrs	r3, r3, #21
 80023aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	331b      	adds	r3, #27
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	331b      	adds	r3, #27
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	4413      	add	r3, r2
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0202 	and.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	331b      	adds	r3, #27
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	331b      	adds	r3, #27
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b2da      	uxtb	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	331b      	adds	r3, #27
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4413      	add	r3, r2
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0a1a      	lsrs	r2, r3, #8
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0c1a      	lsrs	r2, r3, #16
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3302      	adds	r3, #2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e1a      	lsrs	r2, r3, #24
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3303      	adds	r3, #3
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4413      	add	r3, r2
 8002498:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3304      	adds	r3, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a1a      	lsrs	r2, r3, #8
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3305      	adds	r3, #5
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0c1a      	lsrs	r2, r3, #16
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3306      	adds	r3, #6
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e1a      	lsrs	r2, r3, #24
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3307      	adds	r3, #7
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e007      	b.n	800251c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e006      	b.n	800252e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <HAL_CAN_ActivateNotification+0x1e>
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d109      	bne.n	800256c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6959      	ldr	r1, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e006      	b.n	800257a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08a      	sub	sp, #40	; 0x28
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d07c      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d023      	beq.n	800261e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f983 	bl	80028f4 <HAL_CAN_TxMailbox0CompleteCallback>
 80025ee:	e016      	b.n	800261e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	e00c      	b.n	800261e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	e002      	b.n	800261e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f989 	bl	8002930 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d024      	beq.n	8002672 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002630:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f963 	bl	8002908 <HAL_CAN_TxMailbox1CompleteCallback>
 8002642:	e016      	b.n	8002672 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	e00c      	b.n	8002672 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e002      	b.n	8002672 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f969 	bl	8002944 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d024      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002684:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f943 	bl	800291c <HAL_CAN_TxMailbox2CompleteCallback>
 8002696:	e016      	b.n	80026c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e00c      	b.n	80026c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
 80026be:	e002      	b.n	80026c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f949 	bl	8002958 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2210      	movs	r2, #16
 80026e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2208      	movs	r2, #8
 8002704:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f930 	bl	800296c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7fd ff01 	bl	800052c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2210      	movs	r2, #16
 800274c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2208      	movs	r2, #8
 8002768:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f912 	bl	8002994 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8f9 	bl	8002980 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2210      	movs	r2, #16
 80027a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8fc 	bl	80029a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2208      	movs	r2, #8
 80027ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8f5 	bl	80029bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d07b      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d072      	beq.n	80028cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	2b00      	cmp	r3, #0
 8002842:	d043      	beq.n	80028cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d03e      	beq.n	80028cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002854:	2b60      	cmp	r3, #96	; 0x60
 8002856:	d02b      	beq.n	80028b0 <HAL_CAN_IRQHandler+0x32a>
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d82e      	bhi.n	80028ba <HAL_CAN_IRQHandler+0x334>
 800285c:	2b50      	cmp	r3, #80	; 0x50
 800285e:	d022      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x320>
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d82a      	bhi.n	80028ba <HAL_CAN_IRQHandler+0x334>
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d019      	beq.n	800289c <HAL_CAN_IRQHandler+0x316>
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d826      	bhi.n	80028ba <HAL_CAN_IRQHandler+0x334>
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d010      	beq.n	8002892 <HAL_CAN_IRQHandler+0x30c>
 8002870:	2b30      	cmp	r3, #48	; 0x30
 8002872:	d822      	bhi.n	80028ba <HAL_CAN_IRQHandler+0x334>
 8002874:	2b10      	cmp	r3, #16
 8002876:	d002      	beq.n	800287e <HAL_CAN_IRQHandler+0x2f8>
 8002878:	2b20      	cmp	r3, #32
 800287a:	d005      	beq.n	8002888 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800287c:	e01d      	b.n	80028ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002886:	e019      	b.n	80028bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f043 0310 	orr.w	r3, r3, #16
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002890:	e014      	b.n	80028bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	f043 0320 	orr.w	r3, r3, #32
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800289a:	e00f      	b.n	80028bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a4:	e00a      	b.n	80028bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ae:	e005      	b.n	80028bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028b8:	e000      	b.n	80028bc <HAL_CAN_IRQHandler+0x336>
            break;
 80028ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2204      	movs	r2, #4
 80028d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f872 	bl	80029d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	; (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff29 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff3e 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff8e 	bl	8002ad8 <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff31 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ffa2 	bl	8002b40 <SysTick_Config>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7fe fb4c 	bl	80012b0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e099      	b.n	8002d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c44:	e00f      	b.n	8002c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c46:	f7fe fb33 	bl	80012b0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d908      	bls.n	8002c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e078      	b.n	8002d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e8      	bne.n	8002c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_DMA_Init+0x158>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d107      	bne.n	8002cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d117      	bne.n	8002d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fa6f 	bl	80031f0 <DMA_CheckFifoParam>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d26:	2301      	movs	r3, #1
 8002d28:	e016      	b.n	8002d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa26 	bl	8003184 <DMA_CalcBaseAndBitshift>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	223f      	movs	r2, #63	; 0x3f
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	f010803f 	.word	0xf010803f

08002d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_DMA_Start_IT+0x26>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e040      	b.n	8002e0c <HAL_DMA_Start_IT+0xa8>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d12f      	bne.n	8002dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f9b8 	bl	8003128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	223f      	movs	r2, #63	; 0x3f
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0216 	orr.w	r2, r2, #22
 8002dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0208 	orr.w	r2, r2, #8
 8002dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e005      	b.n	8002e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e20:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_DMA_IRQHandler+0x248>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a8e      	ldr	r2, [pc, #568]	; (8003060 <HAL_DMA_IRQHandler+0x24c>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2208      	movs	r2, #8
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0204 	bic.w	r2, r2, #4
 8002e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	2201      	movs	r2, #1
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0202 	orr.w	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2204      	movs	r2, #4
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2204      	movs	r2, #4
 8002eda:	409a      	lsls	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f043 0204 	orr.w	r2, r3, #4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d043      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d03c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2210      	movs	r2, #16
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d024      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
 8002f42:	e01f      	b.n	8002f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
 8002f54:	e016      	b.n	8002f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0208 	bic.w	r2, r2, #8
 8002f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	2220      	movs	r2, #32
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 808f 	beq.w	80030b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8087 	beq.w	80030b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2220      	movs	r2, #32
 8002fac:	409a      	lsls	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d136      	bne.n	800302c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0216 	bic.w	r2, r2, #22
 8002fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_DMA_IRQHandler+0x1da>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0208 	bic.w	r2, r2, #8
 8002ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	223f      	movs	r2, #63	; 0x3f
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	2b00      	cmp	r3, #0
 8003020:	d07e      	beq.n	8003120 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
        }
        return;
 800302a:	e079      	b.n	8003120 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10d      	bne.n	8003064 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	2b00      	cmp	r3, #0
 800304e:	d031      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e02c      	b.n	80030b4 <HAL_DMA_IRQHandler+0x2a0>
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000
 8003060:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
 8003074:	e01e      	b.n	80030b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0210 	bic.w	r2, r2, #16
 8003092:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d032      	beq.n	8003122 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d022      	beq.n	800310e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2205      	movs	r2, #5
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	3301      	adds	r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d307      	bcc.n	80030fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f2      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x2cc>
 80030fa:	e000      	b.n	80030fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
 800311e:	e000      	b.n	8003122 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003120:	bf00      	nop
    }
  }
}
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d108      	bne.n	8003168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003166:	e007      	b.n	8003178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	3b10      	subs	r3, #16
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <DMA_CalcBaseAndBitshift+0x68>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d909      	bls.n	80031c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	1d1a      	adds	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58
 80031c4:	e007      	b.n	80031d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	aaaaaaab 	.word	0xaaaaaaab
 80031ec:	0800502c 	.word	0x0800502c

080031f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d11f      	bne.n	800324a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d856      	bhi.n	80032be <DMA_CheckFifoParam+0xce>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <DMA_CheckFifoParam+0x28>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	08003229 	.word	0x08003229
 800321c:	0800323b 	.word	0x0800323b
 8003220:	08003229 	.word	0x08003229
 8003224:	080032bf 	.word	0x080032bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d046      	beq.n	80032c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003238:	e043      	b.n	80032c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003242:	d140      	bne.n	80032c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003248:	e03d      	b.n	80032c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	d121      	bne.n	8003298 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d837      	bhi.n	80032ca <DMA_CheckFifoParam+0xda>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <DMA_CheckFifoParam+0x70>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003271 	.word	0x08003271
 8003264:	08003277 	.word	0x08003277
 8003268:	08003271 	.word	0x08003271
 800326c:	08003289 	.word	0x08003289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      break;
 8003274:	e030      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d025      	beq.n	80032ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003286:	e022      	b.n	80032ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003290:	d11f      	bne.n	80032d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003296:	e01c      	b.n	80032d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d903      	bls.n	80032a6 <DMA_CheckFifoParam+0xb6>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032a4:	e018      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
      break;
 80032aa:	e015      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	e00b      	b.n	80032d6 <DMA_CheckFifoParam+0xe6>
      break;
 80032be:	bf00      	nop
 80032c0:	e00a      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      break;
 80032c2:	bf00      	nop
 80032c4:	e008      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
 80032c8:	e006      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e004      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
    }
  } 
  
  return status; 
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e16b      	b.n	80035dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003304:	2201      	movs	r2, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	f040 815a 	bne.w	80035d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d005      	beq.n	800333a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003336:	2b02      	cmp	r3, #2
 8003338:	d130      	bne.n	800339c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0201 	and.w	r2, r3, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d017      	beq.n	80033d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d123      	bne.n	800342c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	08da      	lsrs	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3208      	adds	r2, #8
 80033ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	220f      	movs	r2, #15
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0203 	and.w	r2, r3, #3
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80b4 	beq.w	80035d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b60      	ldr	r3, [pc, #384]	; (80035f4 <HAL_GPIO_Init+0x30c>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4a5f      	ldr	r2, [pc, #380]	; (80035f4 <HAL_GPIO_Init+0x30c>)
 8003478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_GPIO_Init+0x30c>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800348a:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <HAL_GPIO_Init+0x310>)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	3302      	adds	r3, #2
 8003492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_GPIO_Init+0x314>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d02b      	beq.n	800350e <HAL_GPIO_Init+0x226>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a51      	ldr	r2, [pc, #324]	; (8003600 <HAL_GPIO_Init+0x318>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d025      	beq.n	800350a <HAL_GPIO_Init+0x222>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a50      	ldr	r2, [pc, #320]	; (8003604 <HAL_GPIO_Init+0x31c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01f      	beq.n	8003506 <HAL_GPIO_Init+0x21e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4f      	ldr	r2, [pc, #316]	; (8003608 <HAL_GPIO_Init+0x320>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d019      	beq.n	8003502 <HAL_GPIO_Init+0x21a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4e      	ldr	r2, [pc, #312]	; (800360c <HAL_GPIO_Init+0x324>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_GPIO_Init+0x216>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4d      	ldr	r2, [pc, #308]	; (8003610 <HAL_GPIO_Init+0x328>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00d      	beq.n	80034fa <HAL_GPIO_Init+0x212>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4c      	ldr	r2, [pc, #304]	; (8003614 <HAL_GPIO_Init+0x32c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <HAL_GPIO_Init+0x20e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <HAL_GPIO_Init+0x330>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_GPIO_Init+0x20a>
 80034ee:	2307      	movs	r3, #7
 80034f0:	e00e      	b.n	8003510 <HAL_GPIO_Init+0x228>
 80034f2:	2308      	movs	r3, #8
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_Init+0x228>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_Init+0x228>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x228>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x228>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x228>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x228>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x228>
 800350e:	2300      	movs	r3, #0
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003520:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_GPIO_Init+0x310>)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_GPIO_Init+0x334>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003552:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_GPIO_Init+0x334>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003558:	4b30      	ldr	r3, [pc, #192]	; (800361c <HAL_GPIO_Init+0x334>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <HAL_GPIO_Init+0x334>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_GPIO_Init+0x334>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_GPIO_Init+0x334>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_GPIO_Init+0x334>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <HAL_GPIO_Init+0x334>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	f67f ae90 	bls.w	8003304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	40020800 	.word	0x40020800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40021000 	.word	0x40021000
 8003610:	40021400 	.word	0x40021400
 8003614:	40021800 	.word	0x40021800
 8003618:	40021c00 	.word	0x40021c00
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e267      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d075      	beq.n	800375e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b04      	cmp	r3, #4
 800367c:	d00c      	beq.n	8003698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4b85      	ldr	r3, [pc, #532]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d112      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368a:	4b82      	ldr	r3, [pc, #520]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003696:	d10b      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d05b      	beq.n	800375c <HAL_RCC_OscConfig+0x108>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d157      	bne.n	800375c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e242      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x74>
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a75      	ldr	r2, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e01d      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6c      	ldr	r2, [pc, #432]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036ec:	4b69      	ldr	r3, [pc, #420]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a68      	ldr	r2, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b66      	ldr	r3, [pc, #408]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a65      	ldr	r2, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd fdd0 	bl	80012b0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fd fdcc 	bl	80012b0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e207      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xc0>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fdbc 	bl	80012b0 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fdb8 	bl	80012b0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1f3      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0xe8>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d063      	beq.n	8003832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376a:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1c7      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	e03a      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b34      	ldr	r3, [pc, #208]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fd71 	bl	80012b0 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd fd6d 	bl	80012b0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1a8      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4925      	ldr	r1, [pc, #148]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fd50 	bl	80012b0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd fd4c 	bl	80012b0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e187      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d036      	beq.n	80038ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_RCC_OscConfig+0x248>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fd30 	bl	80012b0 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fd fd2c 	bl	80012b0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e167      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x200>
 8003872:	e01b      	b.n	80038ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_OscConfig+0x248>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fd fd19 	bl	80012b0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003880:	e00e      	b.n	80038a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003882:	f7fd fd15 	bl	80012b0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d907      	bls.n	80038a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e150      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
 8003894:	40023800 	.word	0x40023800
 8003898:	42470000 	.word	0x42470000
 800389c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ea      	bne.n	8003882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8097 	beq.w	80039e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a7c      	ldr	r2, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a73      	ldr	r2, [pc, #460]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fd fcd5 	bl	80012b0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7fd fcd1 	bl	80012b0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e10c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x2ea>
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a63      	ldr	r2, [pc, #396]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	e01c      	b.n	8003978 <HAL_RCC_OscConfig+0x324>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b05      	cmp	r3, #5
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x30c>
 8003946:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a5b      	ldr	r2, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0x324>
 8003960:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 0304 	bic.w	r3, r3, #4
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fc96 	bl	80012b0 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd fc92 	bl	80012b0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0cb      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ee      	beq.n	8003988 <HAL_RCC_OscConfig+0x334>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7fd fc80 	bl	80012b0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd fc7c 	bl	80012b0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0b5      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ee      	bne.n	80039b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a1 	beq.w	8003b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d05c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d141      	bne.n	8003a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fc50 	bl	80012b0 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd fc4c 	bl	80012b0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e087      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd fc25 	bl	80012b0 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd fc21 	bl	80012b0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e05c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x416>
 8003a88:	e054      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fc0e 	bl	80012b0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd fc0a 	bl	80012b0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e045      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x444>
 8003ab6:	e03d      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e038      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x4ec>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d028      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d121      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d11a      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0cc      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d90c      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d044      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d119      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e067      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4934      	ldr	r1, [pc, #208]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c34:	f7fd fb3c 	bl	80012b0 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7fd fb38 	bl	80012b0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e04f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d20c      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	490a      	ldr	r1, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fa9c 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	0800501c 	.word	0x0800501c
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	20000004 	.word	0x20000004

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b090      	sub	sp, #64	; 0x40
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	2300      	movs	r3, #0
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80a1 	bhi.w	8003e7c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e09b      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d48:	e09b      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d4e:	e098      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5a:	4b4d      	ldr	r3, [pc, #308]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	627a      	str	r2, [r7, #36]	; 0x24
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d7c:	fb03 f201 	mul.w	r2, r3, r1
 8003d80:	2300      	movs	r3, #0
 8003d82:	fb00 f303 	mul.w	r3, r0, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d8a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d90:	460a      	mov	r2, r1
 8003d92:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d96:	4413      	add	r3, r2
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003daa:	f7fc fa0d 	bl	80001c8 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db6:	e053      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	617a      	str	r2, [r7, #20]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dca:	f04f 0b00 	mov.w	fp, #0
 8003dce:	4652      	mov	r2, sl
 8003dd0:	465b      	mov	r3, fp
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dea:	eb63 090b 	sbc.w	r9, r3, fp
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e02:	ebb2 0408 	subs.w	r4, r2, r8
 8003e06:	eb63 0509 	sbc.w	r5, r3, r9
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	00eb      	lsls	r3, r5, #3
 8003e14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e18:	00e2      	lsls	r2, r4, #3
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	eb14 030a 	adds.w	r3, r4, sl
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	eb45 030b 	adc.w	r3, r5, fp
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e36:	4629      	mov	r1, r5
 8003e38:	028b      	lsls	r3, r1, #10
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e40:	4621      	mov	r1, r4
 8003e42:	028a      	lsls	r2, r1, #10
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e54:	f7fc f9b8 	bl	80001c8 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3740      	adds	r7, #64	; 0x40
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	017d7840 	.word	0x017d7840

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e041      	b.n	8003f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd f83c 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 fbf6 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04e      	b.n	8003ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a23      	ldr	r2, [pc, #140]	; (8004000 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d01d      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <HAL_TIM_Base_Start_IT+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a18      	ldr	r2, [pc, #96]	; (8004018 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d111      	bne.n	8003fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d010      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	e007      	b.n	8003ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40010400 	.word	0x40010400
 8004014:	40014000 	.word	0x40014000
 8004018:	40001800 	.word	0x40001800

0800401c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <HAL_TIM_OC_Start_IT+0x28>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e022      	b.n	800408a <HAL_TIM_OC_Start_IT+0x6e>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d109      	bne.n	800405e <HAL_TIM_OC_Start_IT+0x42>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e015      	b.n	800408a <HAL_TIM_OC_Start_IT+0x6e>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d109      	bne.n	8004078 <HAL_TIM_OC_Start_IT+0x5c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e008      	b.n	800408a <HAL_TIM_OC_Start_IT+0x6e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0c7      	b.n	8004222 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_OC_Start_IT+0x86>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a0:	e013      	b.n	80040ca <HAL_TIM_OC_Start_IT+0xae>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_OC_Start_IT+0x96>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	e00b      	b.n	80040ca <HAL_TIM_OC_Start_IT+0xae>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_OC_Start_IT+0xa6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c0:	e003      	b.n	80040ca <HAL_TIM_OC_Start_IT+0xae>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	d841      	bhi.n	8004154 <HAL_TIM_OC_Start_IT+0x138>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_TIM_OC_Start_IT+0xbc>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	08004155 	.word	0x08004155
 80040e0:	08004155 	.word	0x08004155
 80040e4:	08004155 	.word	0x08004155
 80040e8:	0800411f 	.word	0x0800411f
 80040ec:	08004155 	.word	0x08004155
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004155 	.word	0x08004155
 80040f8:	08004131 	.word	0x08004131
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004155 	.word	0x08004155
 8004104:	08004155 	.word	0x08004155
 8004108:	08004143 	.word	0x08004143
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0202 	orr.w	r2, r2, #2
 800411a:	60da      	str	r2, [r3, #12]
      break;
 800411c:	e01d      	b.n	800415a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0204 	orr.w	r2, r2, #4
 800412c:	60da      	str	r2, [r3, #12]
      break;
 800412e:	e014      	b.n	800415a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	60da      	str	r2, [r3, #12]
      break;
 8004140:	e00b      	b.n	800415a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0210 	orr.w	r2, r2, #16
 8004150:	60da      	str	r2, [r3, #12]
      break;
 8004152:	e002      	b.n	800415a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	bf00      	nop
  }

  if (status == HAL_OK)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d15f      	bne.n	8004220 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fcff 	bl	8004b6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2e      	ldr	r2, [pc, #184]	; (800422c <HAL_TIM_OC_Start_IT+0x210>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIM_OC_Start_IT+0x166>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <HAL_TIM_OC_Start_IT+0x214>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_TIM_OC_Start_IT+0x16a>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_TIM_OC_Start_IT+0x16c>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_TIM_OC_Start_IT+0x210>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d01d      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <HAL_TIM_OC_Start_IT+0x218>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <HAL_TIM_OC_Start_IT+0x21c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_TIM_OC_Start_IT+0x220>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_TIM_OC_Start_IT+0x214>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_OC_Start_IT+0x224>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_OC_Start_IT+0x1d0>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_TIM_OC_Start_IT+0x228>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d111      	bne.n	8004210 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d010      	beq.n	8004220 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	e007      	b.n	8004220 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e041      	b.n	80042de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fe36 	bl	8000ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fa20 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d122      	bne.n	8004342 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11b      	bne.n	8004342 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0202 	mvn.w	r2, #2
 8004312:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f9b1 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 800432e:	e005      	b.n	800433c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f9a3 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9b4 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d122      	bne.n	8004396 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d11b      	bne.n	8004396 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f06f 0204 	mvn.w	r2, #4
 8004366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f987 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 8004382:	e005      	b.n	8004390 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f979 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f98a 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d122      	bne.n	80043ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11b      	bne.n	80043ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f06f 0208 	mvn.w	r2, #8
 80043ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f95d 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 80043d6:	e005      	b.n	80043e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f94f 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f960 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d122      	bne.n	800443e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d11b      	bne.n	800443e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0210 	mvn.w	r2, #16
 800440e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2208      	movs	r2, #8
 8004414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f933 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 800442a:	e005      	b.n	8004438 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f925 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f936 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0201 	mvn.w	r2, #1
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fc f831 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fd5b 	bl	8004f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8fb 	bl	80046b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d10e      	bne.n	80044ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0220 	mvn.w	r2, #32
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fd25 	bl	8004f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004512:	2302      	movs	r3, #2
 8004514:	e0ae      	b.n	8004674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f200 809f 	bhi.w	8004664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004561 	.word	0x08004561
 8004530:	08004665 	.word	0x08004665
 8004534:	08004665 	.word	0x08004665
 8004538:	08004665 	.word	0x08004665
 800453c:	080045a1 	.word	0x080045a1
 8004540:	08004665 	.word	0x08004665
 8004544:	08004665 	.word	0x08004665
 8004548:	08004665 	.word	0x08004665
 800454c:	080045e3 	.word	0x080045e3
 8004550:	08004665 	.word	0x08004665
 8004554:	08004665 	.word	0x08004665
 8004558:	08004665 	.word	0x08004665
 800455c:	08004623 	.word	0x08004623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f950 	bl	800480c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	619a      	str	r2, [r3, #24]
      break;
 800459e:	e064      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f9a0 	bl	80048ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
      break;
 80045e0:	e043      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f9f5 	bl	80049d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0208 	orr.w	r2, r2, #8
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
      break;
 8004620:	e023      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fa49 	bl	8004ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	61da      	str	r2, [r3, #28]
      break;
 8004662:	e002      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
      break;
 8004668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a40      	ldr	r2, [pc, #256]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d00f      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3d      	ldr	r2, [pc, #244]	; (80047e4 <TIM_Base_SetConfig+0x118>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00b      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <TIM_Base_SetConfig+0x11c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <TIM_Base_SetConfig+0x120>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3a      	ldr	r2, [pc, #232]	; (80047f0 <TIM_Base_SetConfig+0x124>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d108      	bne.n	800471e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2f      	ldr	r2, [pc, #188]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02b      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d027      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2c      	ldr	r2, [pc, #176]	; (80047e4 <TIM_Base_SetConfig+0x118>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d023      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <TIM_Base_SetConfig+0x11c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <TIM_Base_SetConfig+0x120>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01b      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <TIM_Base_SetConfig+0x124>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d017      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a28      	ldr	r2, [pc, #160]	; (80047f4 <TIM_Base_SetConfig+0x128>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <TIM_Base_SetConfig+0x12c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a26      	ldr	r2, [pc, #152]	; (80047fc <TIM_Base_SetConfig+0x130>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <TIM_Base_SetConfig+0x134>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <TIM_Base_SetConfig+0x138>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <TIM_Base_SetConfig+0x13c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_Base_SetConfig+0xf8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <TIM_Base_SetConfig+0x124>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	615a      	str	r2, [r3, #20]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800
 8004800:	40001800 	.word	0x40001800
 8004804:	40001c00 	.word	0x40001c00
 8004808:	40002000 	.word	0x40002000

0800480c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0302 	bic.w	r3, r3, #2
 8004854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a20      	ldr	r2, [pc, #128]	; (80048e4 <TIM_OC1_SetConfig+0xd8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC1_SetConfig+0x64>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <TIM_OC1_SetConfig+0xdc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10c      	bne.n	800488a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0308 	bic.w	r3, r3, #8
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <TIM_OC1_SetConfig+0xd8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_OC1_SetConfig+0x8e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <TIM_OC1_SetConfig+0xdc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d111      	bne.n	80048be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400

080048ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f023 0210 	bic.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <TIM_OC2_SetConfig+0xe4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC2_SetConfig+0x68>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <TIM_OC2_SetConfig+0xe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10d      	bne.n	8004970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <TIM_OC2_SetConfig+0xe4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_OC2_SetConfig+0x94>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC2_SetConfig+0xe8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d113      	bne.n	80049a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800498e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40010400 	.word	0x40010400

080049d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <TIM_OC3_SetConfig+0xe0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC3_SetConfig+0x66>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <TIM_OC3_SetConfig+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10d      	bne.n	8004a5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <TIM_OC3_SetConfig+0xe0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC3_SetConfig+0x92>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <TIM_OC3_SetConfig+0xe4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d113      	bne.n	8004a92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	031b      	lsls	r3, r3, #12
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <TIM_OC4_SetConfig+0xa4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC4_SetConfig+0x68>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <TIM_OC4_SetConfig+0xa8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d109      	bne.n	8004b3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40010400 	.word	0x40010400

08004b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2201      	movs	r2, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_TIMEx_OCN_Start_IT+0x28>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e022      	b.n	8004c26 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d109      	bne.n	8004bfa <HAL_TIMEx_OCN_Start_IT+0x42>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e015      	b.n	8004c26 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIMEx_OCN_Start_IT+0x5c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e008      	b.n	8004c26 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_TIMEx_OCN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0a3      	b.n	8004d76 <HAL_TIMEx_OCN_Start_IT+0x1be>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_TIMEx_OCN_Start_IT+0x86>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3c:	e013      	b.n	8004c66 <HAL_TIMEx_OCN_Start_IT+0xae>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d104      	bne.n	8004c4e <HAL_TIMEx_OCN_Start_IT+0x96>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c4c:	e00b      	b.n	8004c66 <HAL_TIMEx_OCN_Start_IT+0xae>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d104      	bne.n	8004c5e <HAL_TIMEx_OCN_Start_IT+0xa6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	e003      	b.n	8004c66 <HAL_TIMEx_OCN_Start_IT+0xae>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d01b      	beq.n	8004ca4 <HAL_TIMEx_OCN_Start_IT+0xec>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d821      	bhi.n	8004cb6 <HAL_TIMEx_OCN_Start_IT+0xfe>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIMEx_OCN_Start_IT+0xc8>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIMEx_OCN_Start_IT+0xda>
 8004c7e:	e01a      	b.n	8004cb6 <HAL_TIMEx_OCN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0202 	orr.w	r2, r2, #2
 8004c8e:	60da      	str	r2, [r3, #12]
      break;
 8004c90:	e014      	b.n	8004cbc <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0204 	orr.w	r2, r2, #4
 8004ca0:	60da      	str	r2, [r3, #12]
      break;
 8004ca2:	e00b      	b.n	8004cbc <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	60da      	str	r2, [r3, #12]
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_TIMEx_OCN_Start_IT+0x104>
    }


    default:
      status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cba:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d158      	bne.n	8004d74 <HAL_TIMEx_OCN_Start_IT+0x1bc>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cd0:	60da      	str	r2, [r3, #12]

    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f940 	bl	8004f60 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a22      	ldr	r2, [pc, #136]	; (8004d80 <HAL_TIMEx_OCN_Start_IT+0x1c8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d022      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d01d      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <HAL_TIMEx_OCN_Start_IT+0x1cc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <HAL_TIMEx_OCN_Start_IT+0x1d0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIMEx_OCN_Start_IT+0x1d4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_TIMEx_OCN_Start_IT+0x1d8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <HAL_TIMEx_OCN_Start_IT+0x1dc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIMEx_OCN_Start_IT+0x188>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <HAL_TIMEx_OCN_Start_IT+0x1e0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d111      	bne.n	8004d64 <HAL_TIMEx_OCN_Start_IT+0x1ac>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d010      	beq.n	8004d74 <HAL_TIMEx_OCN_Start_IT+0x1bc>
      {
        __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	e007      	b.n	8004d74 <HAL_TIMEx_OCN_Start_IT+0x1bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40010400 	.word	0x40010400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40001800 	.word	0x40001800

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e05a      	b.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d01d      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10c      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e03d      	b.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2204      	movs	r2, #4
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1a      	ldr	r2, [r3, #32]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1a      	ldr	r2, [r3, #32]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4d0d      	ldr	r5, [pc, #52]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	4d0b      	ldr	r5, [pc, #44]	; (8004fec <__libc_init_array+0x40>)
 8004fbe:	4c0c      	ldr	r4, [pc, #48]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc0:	f000 f820 	bl	8005004 <_init>
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	2600      	movs	r6, #0
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	0800503c 	.word	0x0800503c
 8004fe8:	0800503c 	.word	0x0800503c
 8004fec:	0800503c 	.word	0x0800503c
 8004ff0:	08005040 	.word	0x08005040

08004ff4 <memset>:
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <memset+0xa>
 8004ffc:	4770      	bx	lr
 8004ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8005002:	e7f9      	b.n	8004ff8 <memset+0x4>

08005004 <_init>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	bf00      	nop
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr

08005010 <_fini>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr
